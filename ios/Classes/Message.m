// Autogenerated from Pigeon (v3.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "Message.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface F2NMessage ()
+ (F2NMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface N2FMessage ()
+ (N2FMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation F2NMessage
+ (instancetype)makeWithMsg:(nullable NSString *)msg {
  F2NMessage* pigeonResult = [[F2NMessage alloc] init];
  pigeonResult.msg = msg;
  return pigeonResult;
}
+ (F2NMessage *)fromMap:(NSDictionary *)dict {
  F2NMessage *pigeonResult = [[F2NMessage alloc] init];
  pigeonResult.msg = GetNullableObject(dict, @"msg");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.msg ? self.msg : [NSNull null]), @"msg", nil];
}
@end

@implementation N2FMessage
+ (instancetype)makeWithMsg2:(nullable NSString *)msg2 {
  N2FMessage* pigeonResult = [[N2FMessage alloc] init];
  pigeonResult.msg2 = msg2;
  return pigeonResult;
}
+ (N2FMessage *)fromMap:(NSDictionary *)dict {
  N2FMessage *pigeonResult = [[N2FMessage alloc] init];
  pigeonResult.msg2 = GetNullableObject(dict, @"msg2");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.msg2 ? self.msg2 : [NSNull null]), @"msg2", nil];
}
@end

@interface FlutterMessageCodecReader : FlutterStandardReader
@end
@implementation FlutterMessageCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [F2NMessage fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FlutterMessageCodecWriter : FlutterStandardWriter
@end
@implementation FlutterMessageCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[F2NMessage class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FlutterMessageCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FlutterMessageCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FlutterMessageCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FlutterMessageCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FlutterMessageGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FlutterMessageCodecReaderWriter *readerWriter = [[FlutterMessageCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FlutterMessageSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FlutterMessage> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FlutterMessage.flutterSendMessage"
        binaryMessenger:binaryMessenger
        codec:FlutterMessageGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(flutterSendMessageMsg:error:)], @"FlutterMessage api (%@) doesn't respond to @selector(flutterSendMessageMsg:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        F2NMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api flutterSendMessageMsg:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface NativeMessageCodecReader : FlutterStandardReader
@end
@implementation NativeMessageCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [N2FMessage fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface NativeMessageCodecWriter : FlutterStandardWriter
@end
@implementation NativeMessageCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[N2FMessage class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface NativeMessageCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation NativeMessageCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[NativeMessageCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[NativeMessageCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *NativeMessageGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    NativeMessageCodecReaderWriter *readerWriter = [[NativeMessageCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


@interface NativeMessage ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation NativeMessage

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)nativeSendMessageMsg:(N2FMessage *)arg_msg completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.NativeMessage.nativeSendMessage"
      binaryMessenger:self.binaryMessenger
      codec:NativeMessageGetCodec()];
  [channel sendMessage:@[(arg_msg == nil) ? [NSNull null] : arg_msg] reply:^(id reply) {
    completion(nil);
  }];
}
@end
